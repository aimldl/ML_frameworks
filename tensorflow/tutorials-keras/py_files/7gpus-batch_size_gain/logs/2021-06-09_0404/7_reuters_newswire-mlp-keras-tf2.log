Number of devices: 7
batch_size_per_replica: 512
batch_size: 3584 = 512 * 7
8982 training samples
2246 test samples
11228 total samples
8982 training labels, 2246 test labels
? period ended december 31 shr profit 11 cts vs loss 24 cts net profit 224 271 vs loss 511 349 revs 7 258 688 vs 7 200 349 reuter 3
x_train (8982, 10000)
x_test  (2246, 10000)
y_train_dummy (8982, 46)
y_test_dummy  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
y_train (8982, 46)
y_test  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
x_val  (1000, 10000)
y_val  (1000, 46)
partial_x_train  (7982, 10000)
partial_y_train  (7982, 46)
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 64)                640064    
_________________________________________________________________
dense_1 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_2 (Dense)              (None, 46)                2990      
=================================================================
Total params: 647,214
Trainable params: 647,214
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
1/3 [=========>....................] - ETA: 2s - loss: 3.8267 - accuracy: 0.01233/3 [==============================] - 2s 271ms/step - loss: 3.7265 - accuracy: 0.1682 - val_loss: 3.0981 - val_accuracy: 0.5110
Epoch 2/10
1/3 [=========>....................] - ETA: 0s - loss: 3.0470 - accuracy: 0.51033/3 [==============================] - 0s 54ms/step - loss: 2.9377 - accuracy: 0.5214 - val_loss: 2.4911 - val_accuracy: 0.5640
Epoch 3/10
1/3 [=========>....................] - ETA: 0s - loss: 2.3630 - accuracy: 0.59573/3 [==============================] - 0s 51ms/step - loss: 2.3154 - accuracy: 0.6020 - val_loss: 2.0972 - val_accuracy: 0.5960
Epoch 4/10
1/3 [=========>....................] - ETA: 0s - loss: 1.9655 - accuracy: 0.65353/3 [==============================] - 0s 49ms/step - loss: 1.9233 - accuracy: 0.6579 - val_loss: 1.8322 - val_accuracy: 0.6550
Epoch 5/10
1/3 [=========>....................] - ETA: 0s - loss: 1.7096 - accuracy: 0.68333/3 [==============================] - 0s 49ms/step - loss: 1.6543 - accuracy: 0.6882 - val_loss: 1.6419 - val_accuracy: 0.6580
Epoch 6/10
1/3 [=========>....................] - ETA: 0s - loss: 1.4688 - accuracy: 0.70593/3 [==============================] - 0s 48ms/step - loss: 1.4465 - accuracy: 0.7101 - val_loss: 1.5021 - val_accuracy: 0.6970
Epoch 7/10
1/3 [=========>....................] - ETA: 0s - loss: 1.3134 - accuracy: 0.72993/3 [==============================] - 0s 50ms/step - loss: 1.2890 - accuracy: 0.7370 - val_loss: 1.4033 - val_accuracy: 0.7090
Epoch 8/10
1/3 [=========>....................] - ETA: 0s - loss: 1.1690 - accuracy: 0.75863/3 [==============================] - 0s 50ms/step - loss: 1.1598 - accuracy: 0.7616 - val_loss: 1.3332 - val_accuracy: 0.7200
Epoch 9/10
1/3 [=========>....................] - ETA: 0s - loss: 1.0570 - accuracy: 0.79353/3 [==============================] - 0s 62ms/step - loss: 1.0605 - accuracy: 0.7836 - val_loss: 1.2711 - val_accuracy: 0.7380
Epoch 10/10
1/3 [=========>....................] - ETA: 0s - loss: 1.0061 - accuracy: 0.78183/3 [==============================] - 0s 55ms/step - loss: 0.9884 - accuracy: 0.7883 - val_loss: 1.2367 - val_accuracy: 0.7270
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])
training_time: 0:00:03.528951
