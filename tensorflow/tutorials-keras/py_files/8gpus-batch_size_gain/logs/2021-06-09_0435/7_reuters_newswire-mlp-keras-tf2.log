Number of devices: 8
batch_size_per_replica: 512
batch_size: 4096 = 512 * 8
8982 training samples
2246 test samples
11228 total samples
8982 training labels, 2246 test labels
? period ended december 31 shr profit 11 cts vs loss 24 cts net profit 224 271 vs loss 511 349 revs 7 258 688 vs 7 200 349 reuter 3
x_train (8982, 10000)
x_test  (2246, 10000)
y_train_dummy (8982, 46)
y_test_dummy  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
y_train (8982, 46)
y_test  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
x_val  (1000, 10000)
y_val  (1000, 46)
partial_x_train  (7982, 10000)
partial_y_train  (7982, 46)
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 64)                640064    
_________________________________________________________________
dense_1 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_2 (Dense)              (None, 46)                2990      
=================================================================
Total params: 647,214
Trainable params: 647,214
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
1/2 [==============>...............] - ETA: 1s - loss: 3.8417 - accuracy: 0.00762/2 [==============================] - 2s 544ms/step - loss: 3.8023 - accuracy: 0.1393 - val_loss: 3.5389 - val_accuracy: 0.5410
Epoch 2/10
1/2 [==============>...............] - ETA: 0s - loss: 3.5287 - accuracy: 0.56152/2 [==============================] - 0s 136ms/step - loss: 3.4526 - accuracy: 0.5619 - val_loss: 3.1134 - val_accuracy: 0.5460
Epoch 3/10
1/2 [==============>...............] - ETA: 0s - loss: 3.0557 - accuracy: 0.58062/2 [==============================] - 0s 91ms/step - loss: 2.9968 - accuracy: 0.5745 - val_loss: 2.7431 - val_accuracy: 0.5610
Epoch 4/10
1/2 [==============>...............] - ETA: 0s - loss: 2.6495 - accuracy: 0.59992/2 [==============================] - 0s 88ms/step - loss: 2.5963 - accuracy: 0.6102 - val_loss: 2.4133 - val_accuracy: 0.6020
Epoch 5/10
1/2 [==============>...............] - ETA: 0s - loss: 2.2840 - accuracy: 0.65412/2 [==============================] - 0s 90ms/step - loss: 2.2430 - accuracy: 0.6602 - val_loss: 2.1416 - val_accuracy: 0.6170
Epoch 6/10
1/2 [==============>...............] - ETA: 0s - loss: 1.9646 - accuracy: 0.68192/2 [==============================] - 0s 90ms/step - loss: 1.9468 - accuracy: 0.6882 - val_loss: 1.9216 - val_accuracy: 0.6540
Epoch 7/10
1/2 [==============>...............] - ETA: 0s - loss: 1.7517 - accuracy: 0.71362/2 [==============================] - 0s 89ms/step - loss: 1.7252 - accuracy: 0.7180 - val_loss: 1.7582 - val_accuracy: 0.6630
Epoch 8/10
1/2 [==============>...............] - ETA: 0s - loss: 1.5883 - accuracy: 0.72412/2 [==============================] - 0s 89ms/step - loss: 1.5554 - accuracy: 0.7332 - val_loss: 1.6440 - val_accuracy: 0.6680
Epoch 9/10
1/2 [==============>...............] - ETA: 0s - loss: 1.4060 - accuracy: 0.74832/2 [==============================] - 0s 115ms/step - loss: 1.4003 - accuracy: 0.7518 - val_loss: 1.5228 - val_accuracy: 0.6860
Epoch 10/10
1/2 [==============>...............] - ETA: 0s - loss: 1.2774 - accuracy: 0.76542/2 [==============================] - 0s 102ms/step - loss: 1.2732 - accuracy: 0.7692 - val_loss: 1.4442 - val_accuracy: 0.6940
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])
training_time: 0:00:03.480839
