Number of devices: 8
batch_size_per_replica: 512
batch_size: 4096 = 512 * 8
8982 training samples
2246 test samples
11228 total samples
8982 training labels, 2246 test labels
? period ended december 31 shr profit 11 cts vs loss 24 cts net profit 224 271 vs loss 511 349 revs 7 258 688 vs 7 200 349 reuter 3
x_train (8982, 10000)
x_test  (2246, 10000)
y_train_dummy (8982, 46)
y_test_dummy  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
y_train (8982, 46)
y_test  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
x_val  (1000, 10000)
y_val  (1000, 46)
partial_x_train  (7982, 10000)
partial_y_train  (7982, 46)
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 64)                640064    
_________________________________________________________________
dense_1 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_2 (Dense)              (None, 46)                2990      
=================================================================
Total params: 647,214
Trainable params: 647,214
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
1/2 [==============>...............] - ETA: 1s - loss: 3.8654 - accuracy: 0.01542/2 [==============================] - 2s 547ms/step - loss: 3.8082 - accuracy: 0.0466 - val_loss: 3.4922 - val_accuracy: 0.3930
Epoch 2/10
1/2 [==============>...............] - ETA: 0s - loss: 3.4583 - accuracy: 0.41502/2 [==============================] - 0s 86ms/step - loss: 3.3895 - accuracy: 0.4732 - val_loss: 3.0422 - val_accuracy: 0.6280
Epoch 3/10
1/2 [==============>...............] - ETA: 0s - loss: 2.9688 - accuracy: 0.66412/2 [==============================] - 0s 86ms/step - loss: 2.9146 - accuracy: 0.6530 - val_loss: 2.6460 - val_accuracy: 0.6440
Epoch 4/10
1/2 [==============>...............] - ETA: 0s - loss: 2.5440 - accuracy: 0.67682/2 [==============================] - 0s 88ms/step - loss: 2.4963 - accuracy: 0.6654 - val_loss: 2.3188 - val_accuracy: 0.6440
Epoch 5/10
1/2 [==============>...............] - ETA: 0s - loss: 2.1992 - accuracy: 0.68122/2 [==============================] - 0s 86ms/step - loss: 2.1584 - accuracy: 0.6746 - val_loss: 2.0708 - val_accuracy: 0.6510
Epoch 6/10
1/2 [==============>...............] - ETA: 0s - loss: 1.9096 - accuracy: 0.69802/2 [==============================] - 0s 116ms/step - loss: 1.8872 - accuracy: 0.6921 - val_loss: 1.8789 - val_accuracy: 0.6610
Epoch 7/10
1/2 [==============>...............] - ETA: 0s - loss: 1.7204 - accuracy: 0.70412/2 [==============================] - 0s 91ms/step - loss: 1.6850 - accuracy: 0.7063 - val_loss: 1.7106 - val_accuracy: 0.6740
Epoch 8/10
1/2 [==============>...............] - ETA: 0s - loss: 1.5159 - accuracy: 0.72312/2 [==============================] - 0s 90ms/step - loss: 1.4991 - accuracy: 0.7251 - val_loss: 1.5806 - val_accuracy: 0.6910
Epoch 9/10
1/2 [==============>...............] - ETA: 0s - loss: 1.3879 - accuracy: 0.74662/2 [==============================] - 0s 88ms/step - loss: 1.3586 - accuracy: 0.7489 - val_loss: 1.4742 - val_accuracy: 0.7030
Epoch 10/10
1/2 [==============>...............] - ETA: 0s - loss: 1.2457 - accuracy: 0.76812/2 [==============================] - 0s 92ms/step - loss: 1.2298 - accuracy: 0.7695 - val_loss: 1.3947 - val_accuracy: 0.7180
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])
training_time: 0:00:03.360703
