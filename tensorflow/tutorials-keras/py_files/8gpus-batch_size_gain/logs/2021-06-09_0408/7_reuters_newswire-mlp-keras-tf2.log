Number of devices: 8
batch_size_per_replica: 512
batch_size: 4096 = 512 * 8
8982 training samples
2246 test samples
11228 total samples
8982 training labels, 2246 test labels
? period ended december 31 shr profit 11 cts vs loss 24 cts net profit 224 271 vs loss 511 349 revs 7 258 688 vs 7 200 349 reuter 3
x_train (8982, 10000)
x_test  (2246, 10000)
y_train_dummy (8982, 46)
y_test_dummy  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
y_train (8982, 46)
y_test  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
x_val  (1000, 10000)
y_val  (1000, 46)
partial_x_train  (7982, 10000)
partial_y_train  (7982, 46)
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 64)                640064    
_________________________________________________________________
dense_1 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_2 (Dense)              (None, 46)                2990      
=================================================================
Total params: 647,214
Trainable params: 647,214
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
1/2 [==============>...............] - ETA: 1s - loss: 3.8232 - accuracy: 0.01932/2 [==============================] - 2s 550ms/step - loss: 3.7570 - accuracy: 0.1505 - val_loss: 3.3422 - val_accuracy: 0.4350
Epoch 2/10
1/2 [==============>...............] - ETA: 0s - loss: 3.3265 - accuracy: 0.44192/2 [==============================] - 0s 90ms/step - loss: 3.2320 - accuracy: 0.4671 - val_loss: 2.8089 - val_accuracy: 0.5230
Epoch 3/10
1/2 [==============>...............] - ETA: 0s - loss: 2.7448 - accuracy: 0.55002/2 [==============================] - 0s 89ms/step - loss: 2.6736 - accuracy: 0.5542 - val_loss: 2.3674 - val_accuracy: 0.5790
Epoch 4/10
1/2 [==============>...............] - ETA: 0s - loss: 2.2865 - accuracy: 0.60642/2 [==============================] - 0s 89ms/step - loss: 2.2248 - accuracy: 0.6128 - val_loss: 2.0682 - val_accuracy: 0.5910
Epoch 5/10
1/2 [==============>...............] - ETA: 0s - loss: 1.9267 - accuracy: 0.64362/2 [==============================] - 0s 90ms/step - loss: 1.9062 - accuracy: 0.6382 - val_loss: 1.9059 - val_accuracy: 0.6030
Epoch 6/10
1/2 [==============>...............] - ETA: 0s - loss: 1.7357 - accuracy: 0.65802/2 [==============================] - 0s 93ms/step - loss: 1.7141 - accuracy: 0.6612 - val_loss: 1.7305 - val_accuracy: 0.6370
Epoch 7/10
1/2 [==============>...............] - ETA: 0s - loss: 1.4984 - accuracy: 0.70752/2 [==============================] - 0s 108ms/step - loss: 1.5120 - accuracy: 0.7031 - val_loss: 1.6071 - val_accuracy: 0.6670
Epoch 8/10
1/2 [==============>...............] - ETA: 0s - loss: 1.3967 - accuracy: 0.72832/2 [==============================] - 0s 111ms/step - loss: 1.3854 - accuracy: 0.7305 - val_loss: 1.5130 - val_accuracy: 0.6860
Epoch 9/10
1/2 [==============>...............] - ETA: 0s - loss: 1.2926 - accuracy: 0.74832/2 [==============================] - 0s 90ms/step - loss: 1.2735 - accuracy: 0.7507 - val_loss: 1.4371 - val_accuracy: 0.6960
Epoch 10/10
1/2 [==============>...............] - ETA: 0s - loss: 1.1892 - accuracy: 0.76662/2 [==============================] - 0s 88ms/step - loss: 1.1742 - accuracy: 0.7692 - val_loss: 1.3800 - val_accuracy: 0.7000
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])
training_time: 0:00:03.489642
