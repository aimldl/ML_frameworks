Number of devices: 8
batch_size_per_replica: 512
batch_size: 4096 = 512 * 8
8982 training samples
2246 test samples
11228 total samples
8982 training labels, 2246 test labels
? period ended december 31 shr profit 11 cts vs loss 24 cts net profit 224 271 vs loss 511 349 revs 7 258 688 vs 7 200 349 reuter 3
x_train (8982, 10000)
x_test  (2246, 10000)
y_train_dummy (8982, 46)
y_test_dummy  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
y_train (8982, 46)
y_test  (2246, 46)
3 [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
4 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
x_val  (1000, 10000)
y_val  (1000, 46)
partial_x_train  (7982, 10000)
partial_y_train  (7982, 46)
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense (Dense)                (None, 64)                640064    
_________________________________________________________________
dense_1 (Dense)              (None, 64)                4160      
_________________________________________________________________
dense_2 (Dense)              (None, 46)                2990      
=================================================================
Total params: 647,214
Trainable params: 647,214
Non-trainable params: 0
_________________________________________________________________
Epoch 1/10
1/2 [==============>...............] - ETA: 1s - loss: 3.8357 - accuracy: 0.03002/2 [==============================] - 2s 538ms/step - loss: 3.7745 - accuracy: 0.0488 - val_loss: 3.4106 - val_accuracy: 0.2460
Epoch 2/10
1/2 [==============>...............] - ETA: 0s - loss: 3.3828 - accuracy: 0.25562/2 [==============================] - 0s 87ms/step - loss: 3.3055 - accuracy: 0.3285 - val_loss: 2.9411 - val_accuracy: 0.5730
Epoch 3/10
1/2 [==============>...............] - ETA: 0s - loss: 2.8726 - accuracy: 0.59792/2 [==============================] - 0s 86ms/step - loss: 2.8063 - accuracy: 0.5984 - val_loss: 2.5259 - val_accuracy: 0.6380
Epoch 4/10
1/2 [==============>...............] - ETA: 0s - loss: 2.4208 - accuracy: 0.67632/2 [==============================] - 0s 87ms/step - loss: 2.3681 - accuracy: 0.6710 - val_loss: 2.1947 - val_accuracy: 0.6500
Epoch 5/10
1/2 [==============>...............] - ETA: 0s - loss: 2.0923 - accuracy: 0.67922/2 [==============================] - 0s 87ms/step - loss: 2.0327 - accuracy: 0.6890 - val_loss: 1.9410 - val_accuracy: 0.6770
Epoch 6/10
1/2 [==============>...............] - ETA: 0s - loss: 1.8055 - accuracy: 0.71882/2 [==============================] - 0s 122ms/step - loss: 1.7658 - accuracy: 0.7165 - val_loss: 1.7669 - val_accuracy: 0.6870
Epoch 7/10
1/2 [==============>...............] - ETA: 0s - loss: 1.5969 - accuracy: 0.73242/2 [==============================] - 0s 94ms/step - loss: 1.5751 - accuracy: 0.7265 - val_loss: 1.6347 - val_accuracy: 0.7010
Epoch 8/10
1/2 [==============>...............] - ETA: 0s - loss: 1.4463 - accuracy: 0.74902/2 [==============================] - 0s 88ms/step - loss: 1.4247 - accuracy: 0.7469 - val_loss: 1.5153 - val_accuracy: 0.7190
Epoch 9/10
1/2 [==============>...............] - ETA: 0s - loss: 1.2909 - accuracy: 0.77202/2 [==============================] - 0s 88ms/step - loss: 1.2841 - accuracy: 0.7669 - val_loss: 1.4276 - val_accuracy: 0.7120
Epoch 10/10
1/2 [==============>...............] - ETA: 0s - loss: 1.1828 - accuracy: 0.77862/2 [==============================] - 0s 90ms/step - loss: 1.1761 - accuracy: 0.7799 - val_loss: 1.3537 - val_accuracy: 0.7250
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:148: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])
/home/ubuntu/anaconda3/envs/tensorflow2_latest_p37/gpu_cuda11.0/lib/python3.7/site-packages/tensorflow/python/keras/datasets/reuters.py:149: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])
training_time: 0:00:03.429297
